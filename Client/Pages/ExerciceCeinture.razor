@page "/"
@using GenerateurCeinture.Shared
@using GenerateurCeinture.Client.Pages.Models
@using Microsoft.Extensions.Logging
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Timers
@inject HttpClient Http
@inject ILogger<ExerciceCeinture> Logger

<PageTitle>Ceinture</PageTitle>

<h1>Ceinture de Mathématiques</h1>

<p>Exercez-vous aux ceintures de Math.</p>


<EditForm Model="@request" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Nombre de calculs :
        </label>
        <InputNumber @bind-Value="request.NumberOfExpressions"
                     ParsingErrorMessage="Le champs {0} doit être un entier." />
    </p>
    <p>
        <label>
            Addition :
        </label>
        <InputCheckbox @bind-Value="request.GenerateAddition" />
    </p>
    <p>
        <label>
            Soustraction :
        </label>
        <InputCheckbox @bind-Value="request.GenerateSubstraction" />
    </p>
    <p>
        <label>
            Multiplication :
        </label>
        <InputCheckbox @bind-Value="request.GenerateMultiplication" />
    </p>
    <p>
        <label>
            Division :
        </label>
        <InputCheckbox @bind-Value="request.GenerateDivision" />
    </p>
    <br />
    <p>
        <label>
            Temps :
        </label>
        <InputNumber @bind-Value="request.Temps" style="width:40px" />
        min
    </p>
    <button type="submit">Nouvelle</button>
</EditForm>
@if (model == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleResultatsValidSubmit">
        @*<ObjectGraphDataAnnotationsValidator />*@
        <CustomValidation @ref="customValidation" />    
        <ValidationSummary />
        <p>
            <label>
                Temps Restant :  @(counter > 0 ? @counter + "s" : "écoulé !")
            </label>
            @if (goodAnswers == request.NumberOfExpressions) {                
                <label>
                    Bravo !!!
                </label>
            }
        </p>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Opération</th>
                    <th></th>
                    <th>Résultat</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in model.Items)
                {
                    <tr>
                        <td>@item.Expression.LeftOperand</td>
                        <td>
                            @switch (item.Expression.Operator)
                            {
                                case MathOperator.Add:
                                    <b>+</b>
                                    break;
                                case MathOperator.Divide:
                                    <b>÷</b>
                                    break;
                                case MathOperator.Multiply:
                                    <b>*</b>
                                    break;
                                case MathOperator.Subtract:
                                    <b>-</b>
                                    break;
                            }
                        </td>
                        <td>@item.Expression.RightOperand</td>
                        <td>
                            <InputNumber @bind-Value="@item.Resultat" disabled="@IsFinished" />
                            @*<InputNumberOnInput @bind-Value="@item.Resultat" />*@
                            <ValidationMessage For="@(() => item.Resultat)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}

@code {
    private ResultModel? model;
    private CeintureRequestModel request = new();
    private EditContext? editContext;
    private Timer timer;
    private int counter;
    private CustomValidation customValidation;
    private int? goodAnswers;

    private bool IsFinished => counter <= 0;

    protected override void OnInitialized()
    {
        request.GenerateMultiplication = true;
        request.NumberOfExpressions = 20;
        request.Temps = 1;

        timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += CountdownTimer;

        //#if DEBUG
        //        Thread.Sleep(1000);
        //#endif

        //var options = new JsonSerializerOptions();
        //options.Converters.Add(new JsonStringEnumConverter());

    }

    private async Task<ResultModel?> GenerateNewCeinture(CeintureRequestModel request)
    {
        Ceinture? ceinture = null;
        try
        {
            var kvp = new Dictionary<string, string> {
                { nameof(request.NumberOfExpressions) , (request.NumberOfExpressions ?? 0).ToString() },
                { nameof(request.GenerateAddition) , request.GenerateAddition.ToString() },
                { nameof(request.GenerateDivision) , request.GenerateDivision.ToString() },
                { nameof(request.GenerateMultiplication) , request.GenerateMultiplication.ToString() },
                { nameof(request.GenerateSubstraction) , request.GenerateSubstraction.ToString() },
                { nameof(request.Temps) , (request.Temps ?? 0).ToString() },
              };

            var uriRequest = string.Join("&",
                    kvp.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            ceinture = await Http.GetFromJsonAsync<Ceinture?>(string.Format("api/ceinture?{0}", uriRequest));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load ceinture");
        }

        if (ceinture == null) return null;

        return new ResultModel(ceinture);
    }

    private async Task HandleValidSubmit()
    {
        model = await GenerateNewCeinture(request);
        if (model is null) return;

        editContext = new(model);
        editContext.OnFieldChanged += (sender, eventArgs) => { };
        goodAnswers = null;

        counter = (request.Temps ?? 1) * 60;

        timer.Start();

    }

    private void HandleResultatsValidSubmit()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        goodAnswers = model?.Items.Count(o => o.Resultat == o.ResultatAttendu);

        if (goodAnswers != request.NumberOfExpressions)
        {
            errors.Add(nameof(ResultItem.Resultat),
                new() { $"{request.NumberOfExpressions - goodAnswers} erreurs"});
        }

        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
    }

    private void HandleResultatChanged(string value)
    {
        var here = value;
    }

    private void CountdownTimer(object source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter--;
        }
        else
        {
            timer.Stop();
            if (editContext?.Validate() ?? false) {
                HandleResultatsValidSubmit();

            }
            else {
                throw new Exception("should not happen");
            }
            
        }

        InvokeAsync(StateHasChanged).GetAwaiter().GetResult();
    }
}
